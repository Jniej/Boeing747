clear; clc; close all;

dt = 0.02;
T_total = 100;
t = 0:dt:T_total;

initial_altitude = 10000;
target_altitude = 1000;
V_descent = 200;
initial_pitch = deg2rad(-3);
final_pitch = deg2rad(-1);

descent_rate = 10;

descent_start_time = 5;
descent_end_time = descent_start_time + 60;

X = zeros(size(t));
Z = ones(size(t)) * initial_altitude;
pitch_angle = zeros(size(t));

% PID Controller Parameters
Kp = 0.05; % Increase for stronger response
Ki = 0.008; % Adjust to improve error correction
Kd = 0.005; % Reduce damping to allow oscillation
error_sum = 0;
previous_error = 0;

% Integral Windup Limits
integral_limit = 5;

for i = 2:length(t)
    current_time = t(i);
    altitude_error = target_altitude - Z(i-1);
    error_sum = error_sum + altitude_error * dt;
    error_sum = max(min(error_sum, integral_limit), -integral_limit); % Clamp integral term
    error_derivative = (altitude_error - previous_error) / dt;
    pitch_correction = Kp * altitude_error + Ki * error_sum + Kd * error_derivative;
    previous_error = altitude_error;
    
    % Limit pitch correction to avoid instability
    pitch_correction = max(min(pitch_correction, deg2rad(2)), deg2rad(-2));
    
    if current_time < descent_start_time
        X(i) = X(i-1) + V_descent * dt;
        Z(i) = initial_altitude;
        pitch_angle(i) = 0;
    elseif current_time <= descent_end_time
        X(i) = X(i-1) + V_descent * dt;
        pitch_angle(i) = initial_pitch + pitch_correction;
        Z(i) = Z(i-1) - descent_rate * dt;
    else
        X(i) = X(i-1) + V_descent * dt;
        pitch_angle(i) = final_pitch;
        Z(i) = max(Z(i-1) - descent_rate * dt, target_altitude);
    end
end

figure;
hold on; grid on; axis equal;
xlabel('X (m)'); ylabel('Y (m)'); zlabel('Altitude (m)');
title('3D Aircraft Descent Simulation with PID Control');
view(3);
xlim([0 max(X)*1.05]);
ylim([-200, 200]);
zlim([0, initial_altitude * 1.2]);

aircraftModel = stlread('747.stl');
scaleFactor = 3;
vertices = aircraftModel.Points * scaleFactor;
Rx = makehgtform('zrotate', -pi/2);
rotatedPoints = (Rx(1:3,1:3) * vertices')';
aircraft = patch('Faces', aircraftModel.ConnectivityList, 'Vertices', rotatedPoints, 'FaceColor', 'blue', 'EdgeColor', 'none');

hgt = hgtransform;
set(aircraft, 'Parent', hgt);
trail = plot3(nan, nan, nan, 'r-', 'LineWidth', 1.5);

pivot_offset = [-20, 0, -10];
T_offset = makehgtform('translate', pivot_offset);
T_offset_inv = makehgtform('translate', -pivot_offset);

for i = 1:length(t)
    T_translate = makehgtform('translate', [X(i) 0 Z(i)]);
    T_rotate = makehgtform('yrotate', -pitch_angle(i));
    T = T_translate * T_offset_inv * T_rotate * T_offset;
    set(hgt, 'Matrix', T);
    set(trail, 'XData', X(1:i), 'YData', zeros(1,i), 'ZData', Z(1:i));
    pause(0.005);
end

figure;
subplot(3,1,1);
plot(t(2:end), Kp * (target_altitude - Z(1:end-1)), 'r', 'LineWidth', 1.5);
xlabel('Time (s)'); ylabel('P Term');
title('Proportional Term Response');
grid on;

subplot(3,1,2);
plot(t(2:end), Ki * cumsum((target_altitude - Z(1:end-1)) * dt), 'g', 'LineWidth', 1.5);
xlabel('Time (s)'); ylabel('I Term');
title('Integral Term Response');
grid on;

subplot(3,1,3);
plot(t(2:end), Kd * diff([0, (target_altitude - Z(1:end-1))]) / dt, 'b', 'LineWidth', 1.5);
xlabel('Time (s)'); ylabel('D Term');
title('Derivative Term Response');
grid on;


