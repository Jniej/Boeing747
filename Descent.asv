clear; clc; close all;

% Simulation parameters
dt = 0.02;
T_total = 100;
t = 0:dt:T_total;

% Initial conditions
initial_altitude = 10000;
target_altitude = 1000;
V_target = 200;  % Target airspeed in m/s
leveling_threshold = 1500;  % Altitude at which aircraft starts leveling
zero_roll_angle = 0;  % Target roll angle for leveling
max_throttle = 1.0; % Maximum throttle level
min_throttle = 0.2; % Minimum throttle level
initial_throttle = 0.7;

% State variables
X = zeros(size(t));
Z = ones(size(t)) * initial_altitude;
V = ones(size(t));
throttle = ones(size(t)) * initial_throttle;
pitch_angle = zeros(size(t));
roll_angle = zeros(size(t));

% PID Gains for Airspeed Regulation (Throttle Control)
Kp_speed = 0.02;  
Ki_speed = 0.005;  
Kd_speed = 0.002;  
error_sum_speed = 0;
previous_error_speed = 0;
integral_limit_speed = 5;

% PID Gains for Roll Angle Hold (Leveling)
Kp_roll = 0.1;  
Ki_roll = 0.02;
Kd_roll = 0.01;
error_sum_roll = 0;
previous_error_roll = 0;
integral_limit_roll = 3;

for i = 2:length(t)
    % Airspeed Regulation via Throttle Control
    airspeed_error = V_target - V(i-1);
    error_sum_speed = error_sum_speed + airspeed_error * dt;
    error_sum_speed = max(min(error_sum_speed, integral_limit_speed), -integral_limit_speed);
    error_derivative_speed = (airspeed_error - previous_error_speed) / dt;
    
    throttle(i) = throttle(i-1) + Kp_speed * airspeed_error + Ki_speed * error_sum_speed + Kd_speed * error_derivative_speed;
    throttle(i) = max(min(throttle(i), max_throttle), min_throttle); % Throttle bounded between min and max
    
    previous_error_speed = airspeed_error;
    
    % Velocity update based on throttle input
    V(i) = V(i-1) + (throttle(i) - 0.5) * dt * 100;  % Simulated throttle effect on speed

    % Pitch angle linked to speed for stability
    pitch_angle(i) = deg2rad(-3) + (V_target - V(i)) * 0.01; % Adjust pitch dynamically

    % Descent update
    Vz = V(i) * sin(pitch_angle(i));
    X(i) = X(i-1) + V(i) * dt;
    Z(i) = Z(i-1) + Vz * dt;

    % Roll Angle Hold for Leveling
    if Z(i) < leveling_threshold
        roll_error = zero_roll_angle - roll_angle(i-1);
        error_sum_roll = error_sum_roll + roll_error * dt;
        error_sum_roll = max(min(error_sum_roll, integral_limit_roll), -integral_limit_roll);
        error_derivative_roll = (roll_error - previous_error_roll) / dt;
        
        roll_correction = Kp_roll * roll_error + Ki_roll * error_sum_roll + Kd_roll * error_derivative_roll;
        roll_angle(i) = roll_correction; % Targeting zero roll for leveling
        
        previous_error_roll = roll_error;
    else
        roll_angle(i) = roll_angle(i-1); % Maintain current roll
    end
end

%% 3D Aircraft Simulation
figure;
hold on; grid on; axis equal;
xlabel('X (m)'); ylabel('Y (m)'); zlabel('Altitude (m)');
title('3D Aircraft Descent Simulation with PID Control');
view(3);
xlim([0 max(X)*1.05]);
ylim([-200, 200]);
zlim([0, initial_altitude * 1.2]);

% Load 3D Aircraft Model
aircraftModel = stlread('747.stl');  % Ensure this STL file is in the directory
scaleFactor = 3;
vertices = aircraftModel.Points * scaleFactor;
Rx = makehgtform('zrotate', -pi/2);
rotatedPoints = (Rx(1:3,1:3) * vertices')';
aircraft = patch('Faces', aircraftModel.ConnectivityList, 'Vertices', rotatedPoints, 'FaceColor', 'blue', 'EdgeColor', 'none');

% 3D Transformation Setup
hgt = hgtransform;
set(aircraft, 'Parent', hgt);
trail = plot3(nan, nan, nan, 'r-', 'LineWidth', 1.5);

% Offset so rotation occurs at the correct pivot
pivot_offset = [-20, 0, -10];
T_offset = makehgtform('translate', pivot_offset);
T_offset_inv = makehgtform('translate', -pivot_offset);

% Animation Loop
for i = 1:length(t)
    T_translate = makehgtform('translate', [X(i) 0 Z(i)]);
    T_rotate = makehgtform('yrotate', -pitch_angle(i));
    T = T_translate * T_offset_inv * T_rotate * T_offset;
    set(hgt, 'Matrix', T);
    set(trail, 'XData', X(1:i), 'YData', zeros(1,i), 'ZData', Z(1:i));
    pause(0.005);
end

